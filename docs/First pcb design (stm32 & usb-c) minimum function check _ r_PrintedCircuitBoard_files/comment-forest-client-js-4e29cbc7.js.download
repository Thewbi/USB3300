import{u as e,_ as t,s as n,n as s,e as o,c as i,k as r,e3 as a,x as d,b2 as c,v as l,p as m,t as h,S as p,a$ as u,e4 as v,r as g,e5 as f,d as w,at as b,a1 as _,f as y,g as C,e6 as S,L as x,b7 as k,b8 as j,l as E,aa as P,j as $,Y as L,e7 as A,e8 as M}from"./shell-89405447.js";import{e as R,n as B}from"./ref-137f0f0a.js";import{o as I}from"./shreddit-comment-ed98a153.js";import{t as O}from"./throttle-e21e3a3c.js";import"./icon-admin-a53f667c.js";import"./icon-link-post-9743ea0d.js";import"./icon-user-7388c9d5.js";import{t as V}from"./comments-7e5490a7.js";import"./shreddit-spoiler-d6caba9e.js";import"./faceplate-render-2a67004a.js";import"./shreddit-comment-badges-3530ac2f.js";import"./mod-notes-opener-fe18ae79.js";import{I as D}from"./icon-search-outline-7cff8f45.js";import{s as T}from"./search-params-f31ec4ac.js";import"./reddit-feed-2840ed81.js";import"./faceplate-search-input-4cd2d32e.js";import"./mention-node-d4a8ca9f.js";import"./icon-delete-outline-58aff38b.js";import"./icon-edit-outline-42999429.js";import"./upload-to-s3-b5278634.js";import"./comment-composer-host-d908d22a.js";import"./rte-toolbar-button-emote-b9745afc.js";import"./dom-85f8cf99.js";import"./composer-73d341c2.js";import"./faceplate-progress-c63db886.js";import"./telemetry-event-struct-d8880359.js";import"./common-ui-strings-37674bf6.js";import"./distinguished-tags-1617045d.js";import"./icon-lock-fill-e550f9a1.js";import"./icon-pin-fill-31e79785.js";import"./mod-notes-0bca1e88.js";import"./icon-spoiler-outline-9442115d.js";import"./faceplate-text-input-425fe9df.js";const q=e(n);let z=class extends q{constructor(){super(...arguments),this.commentId="",this.parentCommentPermalink="",this.postPermalink=""}static get styles(){return[i,r(".single-comment-thread-toolbar {\n  align-items: center;\n  display: flex;\n  flex-flow: row nowrap;\n  font: var(--font-title-h6);\n  justify-content: space-between;\n  padding: 0.5rem 1rem;\n}\n")]}firstUpdated(){this.updateComplete.then((()=>{const e=this.getBoundingClientRect().top;window.scrollTo({top:e-48,behavior:"auto"})}))}handleSeeFullDiscussionLink(){const e=document.querySelector("shreddit-post");e&&this.trackEvent(a(e))}render(){if(!this.commentId)return;const e="Single comment thread",t="no-underline hover:no-underline visited:no-underline text-primary";return d`\n <div>\n <div class="single-comment-thread-toolbar text-neutral-content-weak">\n ${this.parentCommentPermalink?d` <a href="${this.parentCommentPermalink}" class="${t}"> ${e} </a> `:d` <span>${e}</span> `}\n <span class="flex-1 h-px mx-xs bg-tone-4" data-id="line"></span>\n <a \n href="${this.postPermalink}" \n class="${t}" \n @click="${this.handleSeeFullDiscussionLink}" \n>\n See full discussion\n </a>\n </div>\n </div>\n `}};t([s({type:String,attribute:"comment-id"})],z.prototype,"commentId",void 0),t([s({type:String,attribute:"parent-comment-permalink"})],z.prototype,"parentCommentPermalink",void 0),t([s({type:String,attribute:"post-permalink"})],z.prototype,"postPermalink",void 0),z=t([o("shreddit-comments-page-tools")],z);const N=e(m(n));let U=class extends N{constructor(){super(...arguments),this.thingId="",this.postId="",this.subredditPrefixedName="",this.isTruncated=!1,this.isStaggered=!1,this.numStaggers=0,this.totalComments=0,this.isProfilePost=!1,this.isReportingEnabled=!1,this.ui="mobile",this.shouldTrackCommentsTelemetry=!1,this.permalink="",this.author="",this.isAuthorDeleted=!1,this.staggerReveals=0,this.initialViewStats={num_comments_viewed:0,comments_viewed_json:[],comments_viewed_list:[],num_comments_consumed:0,comments_consumed_json:[],comments_consumed_list:[]},this.view_stats=this.initialViewStats,this.overflowActionsMenuRef=R(),this.scrollBlocker=new p(this),this._maxVisibleDepth=null,this.depthUpdated=null,this.flushEvents=()=>{const e=((e,t,n,s)=>{let o={};const i=c("post"),r=t.slice(0,1e3);return o={view_stats:{num_comments_viewed:e,comments_viewed_json:JSON.stringify(r),comments_viewed_list:n},post:{...i,number_comments:s}},l({source:"post",action:"view",noun:"comments"},o)})(this.view_stats.num_comments_viewed,this.view_stats.comments_viewed_json,this.view_stats.comments_viewed_list,this.totalComments),t=((e,t,n,s)=>{let o={};const i=c("post"),r=t.slice(0,1e3);return o={view_stats:{num_comments_consumed:e,comments_consumed_json:JSON.stringify(r),comments_consumed_list:n},post:{...i,number_comments:s},screen:{height:window?.screen.height,width:window?.screen.width}},l({source:"post",action:"consume",noun:"comments"},o)})(this.view_stats.num_comments_consumed,this.view_stats.comments_consumed_json,this.view_stats.comments_consumed_list,this.totalComments);this.trackEvent(e),this.trackEvent(t)},this.commentsViewedListener=e=>{this.updateCommentsViewedStats(e.detail)},this.commentsConsumedListener=e=>{this.updateCommentsConsumedStats(e.detail)},this.handleCloseOverflowActionsMenu=()=>{this.overflowActionsMenuRef.value?.close(),document.documentElement.removeEventListener("click",this.handleCloseOverflowActionsMenu),this.scrollBlocker.unblockPageScrolling()},this.handleCommentCreated=({parentThingId:e,body:t})=>{this.postId===e&&(this.querySelector("#next-comment")?.after(...u(t)),this.totalComments+=1)}}static get styles(){return[i,r(":host {\n  display: block;\n  background-color: var(--shreddit-content-background);\n  padding-bottom: var(--spacer-xs);\n}\n.content {\n  position: relative;\n}\n.content.noOverflow {\n  overflow: hidden;\n}\n.content.truncated slot[name='truncated'] {\n  display: none;\n}\n.shadow {\n  background: linear-gradient(180deg, hsla(0, 0%, 100%, 0) 0%, var(--color-tone-7));\n  bottom: 0;\n  content: '';\n  left: 0;\n  pointer-events: none;\n  position: absolute;\n  right: 0;\n  height: 100px;\n}\n.expand-button {\n  background-color: var(--color-global-orangered);\n  border: none;\n  border-radius: 18px;\n  color: var(--color-tone-7);\n  display: block;\n  font-weight: 700;\n  height: 36px;\n  overflow: hidden;\n  padding: 0 12px;\n  text-align: center;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: calc(100% - 32px);\n  margin: 0 16px 8px;\n}\n"),r(v)]}get maxVisibleDepth(){return null===this._maxVisibleDepth&&null===this.depthUpdated&&(this.depthUpdated=new Promise((e=>{requestAnimationFrame((()=>{const t=this.getMaxVisibleDepth();this._maxVisibleDepth=t,e(t)}))}))),this._maxVisibleDepth}getMaxVisibleDepth({containerWidth:e}={}){const t=this.querySelector(":scope > shreddit-comment")?.depth??0;e??(e=this.getBoundingClientRect().width);const n="mobile"===this.ui?232:320,s="mobile"===this.ui?18:32,o="mobile"===this.ui?4:10,i=Math.floor((e-n)/s);return Math.max(1,Math.min(i,o))+t}connectedCallback(){super.connectedCallback(),this.addEventListener(I,this.handleOpenOverflowActionsMenu),this.subscribe(g.CommentCreated,this.handleCommentCreated),this.resizeObserver=new ResizeObserver(O((e=>{let t=0;for(const n of e){const e=n.contentBoxSize.at(0)?.inlineSize;if(e){t=e;break}}if(0===t)return;const n=this.getMaxVisibleDepth({containerWidth:t});if(this._maxVisibleDepth!==n){this._maxVisibleDepth=n,this.depthUpdated=Promise.resolve(n);for(const e of this.querySelectorAll("shreddit-comment"))e.setVisibility(n)}}),128,!0)),this.resizeObserver.observe(this,{box:"content-box"}),this.shouldTrackCommentsTelemetry&&(this.addEventListener("comments-viewed-event",this.commentsViewedListener),this.addEventListener("comments-consumed-event",this.commentsConsumedListener),f((e=>{e?this.view_stats=this.initialViewStats:this.flushEvents()}),{immediate:!0}))}updateCommentsViewedStats(e){return this.view_stats.comments_viewed_json.find((t=>t.comment_id===e?.detail.comment_id))||(this.view_stats.comments_viewed_json.push({comment_depth:e?.detail.comment_depth,comment_id:e?.detail.comment_id,comment_parent_id:e?.detail.comment_parent_id}),this.view_stats.comments_viewed_list.push(e?.detail.comment_id),this.view_stats.num_comments_viewed=this.view_stats.comments_viewed_json.length),e}updateCommentsConsumedStats(e){return this.view_stats.comments_consumed_json.find((t=>t.comment_id===e?.detail.comment_id))||(this.view_stats.comments_consumed_json.push({comment_depth:e?.detail.comment_depth,comment_id:e?.detail.comment_id,comment_parent_id:e?.detail.comment_parent_id}),this.view_stats.comments_consumed_list.push(e?.detail.comment_id),this.view_stats.num_comments_consumed=this.view_stats.comments_consumed_json.length),e}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener(I,this.handleOpenOverflowActionsMenu),this.unsubscribe(g.CommentCreated,this.handleCommentCreated),this.resizeObserver?.unobserve(this),this.resizeObserver?.disconnect(),this.removeEventListener("comments-viewed-event",this.commentsViewedListener),this.removeEventListener("comments-consumed-event",this.commentsConsumedListener)}showAllComments(){this.isTruncated=!1,this.trackEvent(V())}showMoreComments(){this.staggerReveals+=1,this.trackEvent(V())}renderShredtopViewMoreCommentsButton(e){return w({attributes:{type:"button",className:"ml-sm xs:ml-0 font-semibold mt-md",onclick:e},appearance:"brand",shape:"pill",leadingIcon:b({size:_.Medium}),size:y.Small,children:"View more comments"})}renderTruncatedExpandButton(){return this.renderShredtopViewMoreCommentsButton(this.showAllComments)}renderStaggeredExpandButton(){return this.staggerReveals<this.numStaggers?this.renderShredtopViewMoreCommentsButton(this.showMoreComments):d``}renderContent(){if(this.isStaggered){const e=[d`<slot name="staggered_1"></slot>`,d`<slot name="staggered_2"></slot>`,d`<slot name="staggered_3"></slot>`],t=this.staggerReveals>=this.numStaggers?e:e.slice(0,this.staggerReveals);return d`<div \n class="${C({content:!0,truncated:this.staggerReveals<this.numStaggers})}" \n>\n <div class="flex flex-col px-md xs:px-0 gap-md">\n <slot></slot>\n </div>\n ${t}\n </div>`}return d`\n <div \n class="${C({content:!0,truncated:this.isTruncated})}" \n>\n <div class="flex flex-col px-md xs:px-0 gap-md">\n <slot></slot>\n </div>\n <slot name="truncated"></slot>\n </div>\n `}renderExpandButton(){return this.isTruncated?this.isStaggered?this.renderStaggeredExpandButton():this.renderTruncatedExpandButton():""}render(){return d`\n ${this.renderContent()}\n <faceplate-dialog \n ${B(this.overflowActionsMenuRef)}\n class="overflow-actions-dialog" \n @click="${this.handleCloseOverflowActionsMenu}" \n>\n <faceplate-screen-reader-content id="overflow-actions-menu-label">\n Additional comment actions\n </faceplate-screen-reader-content>\n <ul class="overflow-actions-menu" aria-labelledby="overflow-actions-menu-label">\n <li>\n <a href="${this.permalink}">\n <icon-link-post aria-hidden="true" class="overflow-actions-icon"></icon-link-post>\n Share\n </a>\n </li>\n ${this.isProfilePost?"":d`\n <li>\n <a href="/${this.subredditPrefixedName}/">\n <icon-admin aria-hidden="true" class="overflow-actions-icon"></icon-admin>\n More from ${this.subredditPrefixedName}\n </a>\n </li>\n `}\n ${this.isAuthorDeleted?"":d`<li>\n <a href="/user/${this.author}/">\n <icon-user aria-hidden="true" class="overflow-actions-icon"></icon-user> ${this.author}'s profile\n </a>\n </li>`}\n ${this.isReportingEnabled?d`<li>\n <shreddit-overflow-report \n thingId="${this.thingId}" \n type="${S.COMMENT}" \n></shreddit-overflow-report>\n </li>`:""}\n <button \n class="button button-small button-plain block bg-tone-6 text-tone-3 mt-[10px] mx-auto mb-0 w-[calc(100%-20px)] max-w-full" \n>\n Close\n </button>\n </ul>\n </faceplate-dialog>\n ${this.renderExpandButton()}\n `}handleOpenOverflowActionsMenu({detail:{author:e,isAuthorDeleted:t,permalink:n,thingId:s}}){this.author=e,this.isAuthorDeleted=t,this.permalink=n,this.thingId=s,this.overflowActionsMenuRef.value?.showModal(),document.documentElement.addEventListener("click",this.handleCloseOverflowActionsMenu),this.scrollBlocker.blockPageScrolling()}};t([s({type:String})],U.prototype,"thingId",void 0),t([s({type:String,attribute:"post-id"})],U.prototype,"postId",void 0),t([s({type:String,attribute:"subreddit-prefixed-name"})],U.prototype,"subredditPrefixedName",void 0),t([s({type:Boolean})],U.prototype,"isTruncated",void 0),t([s({type:Boolean})],U.prototype,"isStaggered",void 0),t([s({type:Number})],U.prototype,"numStaggers",void 0),t([s({type:Number})],U.prototype,"totalComments",void 0),t([s({type:Boolean})],U.prototype,"isProfilePost",void 0),t([s({type:Boolean,attribute:"is-reporting-enabled"})],U.prototype,"isReportingEnabled",void 0),t([s({type:String,attribute:"ui"})],U.prototype,"ui",void 0),t([s({type:Boolean,attribute:"should-track-comments-telemetry"})],U.prototype,"shouldTrackCommentsTelemetry",void 0),t([h()],U.prototype,"permalink",void 0),t([h()],U.prototype,"author",void 0),t([h()],U.prototype,"isAuthorDeleted",void 0),t([h()],U.prototype,"staggerReveals",void 0),U=t([o("shreddit-comment-tree")],U);class F{constructor(){this.partial=null,this.loadAndReplaceContent=async({afterFailure:e,afterSuccess:t,wrapPartialElement:n=(e=>e),src:s,target:o})=>{const i=document.createElement("faceplate-partial");i.setAttribute("loading",x.Programmatic),i.setAttribute("src",s),i.setAttribute("class","block min-h-screen xs:min-h-[20rem]");const r=document.createElement("shreddit-loading");i.appendChild(r);const a=this.partial??document.getElementById(o),d=`${a.getBoundingClientRect().height}px`;i.style.minHeight=d,a.insertAdjacentElement("beforebegin",n(i)),a.remove(),this.partial=i;try{const e=new Promise(((e,t)=>{const n=e=>{this.partial!==i&&(e.stopImmediatePropagation(),e.stopPropagation()),t()};i.addEventListener("faceplate-error",n,{once:!0}),i.addEventListener("faceplate-alert",n,{once:!0})}));await Promise.race([e,i.load()]),this.partial=null;document.getElementById(o).style.minHeight=d,t?.()}catch{if(this.partial!==i)return;e?.()}}}}let H=class extends n{constructor(){super(...arguments),this.target="",this.path="",this.handleSortEvent=async e=>{const t=e.detail.selected;this.updateLocation({sort:t});const n=new URL(`${location.origin}${this.path}`);n.searchParams.set("sort",t.toLowerCase()),n.searchParams.set("inline-refresh","true");const s=n.toString().substring(location.origin.length);this.replaceContentController.loadAndReplaceContent({src:s,target:this.target,afterSuccess:()=>k(this,{message:"The comments are sorted successfully",options:{priority:j.assertive}}),afterFailure:()=>this.dispatchEvent(E("faceplate-alert",{level:P.error,message:"Failed to load the comments."}))})},this.replaceContentController=new F}updateLocation({sort:e}){const t=new URL(location.href);t.searchParams.set("sort",e.toLowerCase()),history.replaceState({},"",t.toString())}connectedCallback(){super.connectedCallback(),this.querySelector("shreddit-sort-dropdown")?.addEventListener("comment-sort",this.handleSortEvent)}disconnectedCallback(){super.disconnectedCallback(),this.querySelector("shreddit-sort-dropdown")?.removeEventListener("comment-sort",this.handleSortEvent)}render(){return d`<slot></slot>`}};t([s({type:String})],H.prototype,"target",void 0),t([s({type:String})],H.prototype,"path",void 0),H=t([o("shreddit-comments-sort-dropdown")],H);let J=class extends n{constructor(){super(...arguments),this.target="",this.path="",this.showOnLoad=!1,this.open=this.showOnLoad,this.commentSearchActive=this.showOnLoad,this.replaceContentController=new F,this.handlePdpCommentSearch=L((async()=>{const e=this.searchInput?.value??"";this.addSearchParamsToUrl({query:e}),this.commentSearchActive=!0;const t=document.createElement("reddit-feed");t.id=this.target,t.classList.add("block","mt-md"),this.replaceContentController.loadAndReplaceContent({afterSuccess:()=>{null!==t.querySelector("shreddit-loading")&&t.replaceChildren(`Hm... we couldn’t find any results for “${e}”`)},src:`/svc/shreddit${T({query:e,scope:{type:A.PDP,path:this.path},cursor:{},type:M.Comments})}`,target:this.target,wrapPartialElement:e=>(t.appendChild(e),t)})}),300),this.handleKeyDown=e=>{"Enter"===e.key&&this.handlePdpCommentSearch()}}addSearchParamsToUrl({query:e}){const t=location.href,n=new URL(t);n.searchParams.set("q",e),n.searchParams.set("type",M.Comments);const s=n.toString();s!==t&&history.replaceState({},"",s)}updated(e){e.has("open")&&this.open&&this.searchInput?.innerInput?.focus()}render(){return d` <faceplate-tooltip \n class="${C({hidden:this.open})}" \n appearance="inverted" \n>${w({appearance:"plain",size:y.Medium,shape:"pill",attributes:{"aria-controls":"pdp-comment-search-form","aria-expanded":`${this.open}`,className:"ml-[6px]",id:"expand-search-button",onclick:()=>{this.open=!0},slot:"trigger",type:"button"},screenReaderContent:"Expand comment search",leadingIcon:D({size:_.Small})})}\n Search Comments\n </faceplate-tooltip>\n <form \n class="${C({hidden:!this.open})}" \n id="pdp-comment-search-form" \n @submit="${this.handlePdpCommentSearch}" \n>\n <faceplate-search-input \n class="m-0 bg-secondary-background rounded-full focus-within:bg-neutral-background-strong w-full" \n placeholder="Search Comments" \n @keydown="${this.handleKeyDown}" \n @blur="${()=>{this.commentSearchActive||(this.open=!1)}}" \n></faceplate-search-input>\n </form>`}};J.styles=[i],t([s({type:String})],J.prototype,"target",void 0),t([s({type:String})],J.prototype,"path",void 0),t([s({attribute:"show-on-load",type:Boolean})],J.prototype,"showOnLoad",void 0),t([$("faceplate-search-input")],J.prototype,"searchInput",void 0),t([h()],J.prototype,"open",void 0),t([h()],J.prototype,"commentSearchActive",void 0),J=t([o("pdp-comment-search-input")],J);
//# sourceMappingURL=comment-forest-client-js-4e29cbc7.js.map
